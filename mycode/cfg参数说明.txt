[net]
# Testing
#batch=1
#subdivisions=1
# Training
batch=64   				一批训练样本的样本数量，每batch个样本更新一次参数
subdivisions=64		    batch/subdivisions作为一次性送入训练器的样本数量
					    如果内存不够大，将batch分割为subdivisions个子batch
					上面这两个参数如果电脑内存小，则把batch改小一点，batch越大，训练效果越好
					subdivisions越大，可以减轻显卡压力
width=416			
height=416
channels=3
					以上三个参数为输入图像的参数信息 width和height影响网络对输入图像的分辨率，
					从而影响precision，只可以设置成32的倍数
 
momentum=0.9				DeepLearning1中最优化方法中的动量参数，这个值影响着梯度下降到最优值得速度  
decay=0.0005				权重衰减正则项，防止过拟合
angle=0					    通过旋转角度来生成更多训练样本
saturation = 1.5			通过调整饱和度来生成更多训练样本
exposure = 1.5				通过调整曝光量来生成更多训练样本
hue=.1					    通过调整色调来生成更多训练样本
 
learning_rate=0.001			学习率决定着权值更新的速度，设置得太大会使结果超过最优值，太小会使下降速度过慢。
					如果仅靠人为干预调整参数，需要不断修改学习率。刚开始训练时可以将学习率设置的高一点，
					而一定轮数之后，将其减小
					在训练过程中，一般根据训练轮数设置动态变化的学习率。
					刚开始训练时：学习率以 0.01 ~ 0.001 为宜。
					一定轮数过后：逐渐减缓。
					接近训练结束：学习速率的衰减应该在100倍以上。
					学习率的调整参考https://blog.csdn.net/qq_33485434/article/details/80452941
 
burn_in=1000				在迭代次数小于burn_in时，其学习率的更新有一种方式，大于burn_in时，才采用policy的更新方式
max_batches = 500200		        训练达到max_batches后停止学习
policy=steps				这个是学习率调整的策略，有policy：constant, steps, exp, poly, step, sig, RANDOM，constant等方式
					        参考https://nanfei.ink/2018/01/23/YOLOv2%E8%B0%83%E5%8F%82%E6%80%BB%E7%BB%93/#more
steps=40000,45000			下面这两个参数steps和scale是设置学习率的变化，比如迭代到40000次时，学习率衰减十倍。
scales=.1,.1				45000次迭代时，学习率又会在前一个学习率的基础上衰减十倍
 
[convolutional]
batch_normalize=1 		批标准化
filters=32			    输出特征图的数量
size=3					卷积核的尺寸
stride=1				做卷积运算的步长
pad=1					如果pad为0,padding由 padding参数指定。
					    如果pad为1，padding大小为size/2，padding应该是对输入图像左边缘拓展的像素数量
activation=leaky		激活函数的类型
 
# Downsample           下采样
 
[convolutional]
batch_normalize=1
filters=64
size=3
stride=2
pad=1
activation=leaky
 
.
.
.
.
.
.
 
[convolutional]
size=1
stride=1
pad=1
filters=18				每一个[region/yolo]层前的最后一个卷积层中的 filters=num(yolo层个数)*(classes+5) 
					    5的意义是5个坐标，论文中的tx,ty,tw,th,to
activation=linear
 
 
[yolo] 					在yoloV2中yolo层叫region层
mask = 6,7,8
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
					anchors是可以事先通过cmd指令计算出来的，是和图片数量，width,height以及cluster(应该就是下面的num的值，
					即想要使用的anchors的数量)相关的预选框，可以手工挑选，也可以通过k means 从训练样本中学出
 
classes=1
num=9
jitter=.3
ignore_thresh = .5
truth_thresh = 1
random=1				random设置成1，可以增加检测精度precision
 
.
.
.
.
.
.
 
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
 
[convolutional]
size=1
stride=1
pad=1
filters=18                #######    3*(5+类别个数)
activation=linear
 
 
[yolo]
mask = 3,4,5
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=1
num=9	  				每个grid cell预测几个box,和anchors的数量一致。当想要使用更多anchors时需要调大num，
					且如果调大num后训练时Obj趋近0的话可以尝试调大object_scale
jitter=.3			        利用数据抖动产生更多数据，YOLOv2中使用的是crop，filp，以及net层的angle，flip是随机的，
					jitter就是crop的参数，tiny-yolo-voc.cfg中jitter=.3，就是在0~0.3中进行crop
ignore_thresh = .5			决定是否需要计算IOU误差的参数，大于thresh，IOU误差不会夹在cost function中
truth_thresh = 1
random=1				如果为1，每次迭代图片大小随机从320到608，步长为32，如果为0，每次训练大小与输入大小一致
 
.
.
.
.
.
.
 
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
 
[convolutional]
size=1
stride=1
pad=1
filters=18          #######    3*(5+类别个数)
activation=linear
 
 
[yolo]
mask = 0,1,2     ###使用anchor的索引，0，1，2表示使用下面定义的anchors中的前三个anchor
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326#######
classes=1
num=9    ######
jitter=.3
ignore_thresh = .5
truth_thresh = 1
random=1	 ####
 
官网介绍中的关键点：
    图片样本的获取可以自己找，也可以下载相关数据集，coco,voc数据集中可能也含有相关能用的样本
 
    Note: If during training you see nan values for avg (loss) field - then training goes wrong, 
    but if nan is in some other lines - then training goes well.
 
    When should I stop training:
    When you see that average loss 0.xxxxxx avg no longer decreases at many iterations then you should stop training.
    Once training is stopped, you should take some of last .weights-files from darknet\build\darknet\x64\backup and choose the best of them.
 
    Overfitting - is case when you can detect objects on images from training-dataset, 
    but can't detect objects on any others images. You should get weights from Early Stopping Point.
	
    IoU (intersect of union) - average instersect of union of objects and detections for a certain threshold = 0.24
 
    How to improve object detection:
    Before training:
    set flag random=1 in your .cfg-file - it will increase precision by training Yolo for different resolutions.
    increase network resolution in your .cfg-file (height=608, width=608 or any value multiple of 32) - it will increase precision.
    recalculate anchors for your dataset for width and height from cfg-file: 
    darknet.exe detector calc_anchors data/obj.data -num_of_clusters 9 -width 416 -height 416 then set the same 9 anchors in each of 3 [yolo]-layers in your cfg-file
    设置锚点
	
    desirable that your training dataset include images with objects at diffrent: 
    scales, rotations, lightings, from different sides, on different backgrounds
    样本特点尽量多样化，亮度，旋转，背景，目标位置，尺寸
 
    desirable that your training dataset include images with non-labeled objects that you do not want to detect - negative samples without bounded box (empty .txt files)
    可以添加没有标注框的图片和其空的txt文件，作为negative数据
	
    for training with a large number of objects in each image, add the parameter max=200 or higher value in the last layer [region] in your cfg-file
 
    to speedup training (with decreasing detection accuracy) do Fine-Tuning instead of Transfer-Learning, 
    set param stopbackward=1 in one of the penultimate convolutional layers before the 1-st [yolo]-layer, 
    for example here: https://github.com/AlexeyAB/darknet/blob/0039fd26786ab5f71d5af725fc18b3f521e7acfd/cfg/yolov3.cfg#L598
    可以在第一个[yolo]层之前的倒数第二个[convolutional]层末尾添加 stopbackward=1,以此提升训练速度
 
    After training - for detection:
    Increase network-resolution by set in your .cfg-file (height=608 and width=608) or (height=832 and width=832) 
    or (any value multiple of 32) - this increases the precision and makes it possible to detect small objects,
    you do not need to train the network again, just use .weights-file already trained for 416x416 resolution.
    即使在用416*416训练完之后，也可以在cfg文件中设置较大的width和height，增加网络对图像的分辨率，从而更可能检测出图像中的小目标，而不需要重新训练
 
    if error Out of memory occurs then in .cfg-file you should increase subdivisions=16, 32 or 64
    Out of memory的错误需要通过增大subdivisions来解决
官网介绍中的关键点：
    图片样本的获取可以自己找，也可以下载相关数据集，coco,voc数据集中可能也含有相关能用的样本

    Note: If during training you see nan values for avg (loss) field - then training goes wrong, 
    but if nan is in some other lines - then training goes well.

    When should I stop training:
    When you see that average loss 0.xxxxxx avg no longer decreases at many iterations then you should stop training.
    Once training is stopped, you should take some of last .weights-files from darknet\build\darknet\x64\backup and choose the best of them.

    Overfitting - is case when you can detect objects on images from training-dataset, 
    but can't detect objects on any others images. You should get weights from Early Stopping Point.
	
    IoU (intersect of union) - average instersect of union of objects and detections for a certain threshold = 0.24

    How to improve object detection:
    Before training:
    set flag random=1 in your .cfg-file - it will increase precision by training Yolo for different resolutions.
    increase network resolution in your .cfg-file (height=608, width=608 or any value multiple of 32) - it will increase precision.
    recalculate anchors for your dataset for width and height from cfg-file: 
    darknet.exe detector calc_anchors data/obj.data -num_of_clusters 9 -width 416 -height 416 then set the same 9 anchors in each of 3 [yolo]-layers in your cfg-file
    设置锚点
	
    desirable that your training dataset include images with objects at diffrent: 
    scales, rotations, lightings, from different sides, on different backgrounds
    样本特点尽量多样化，亮度，旋转，背景，目标位置，尺寸

    desirable that your training dataset include images with non-labeled objects that you do not want to detect - negative samples without bounded box (empty .txt files)
    可以添加没有标注框的图片和其空的txt文件，作为negative数据
	
    for training with a large number of objects in each image, add the parameter max=200 or higher value in the last layer [region] in your cfg-file

    to speedup training (with decreasing detection accuracy) do Fine-Tuning instead of Transfer-Learning, 
    set param stopbackward=1 in one of the penultimate convolutional layers before the 1-st [yolo]-layer, 
    for example here: https://github.com/AlexeyAB/darknet/blob/0039fd26786ab5f71d5af725fc18b3f521e7acfd/cfg/yolov3.cfg#L598
    可以在第一个[yolo]层之前的倒数第二个[convolutional]层末尾添加 stopbackward=1,以此提升训练速度

    After training - for detection:
    Increase network-resolution by set in your .cfg-file (height=608 and width=608) or (height=832 and width=832) 
    or (any value multiple of 32) - this increases the precision and makes it possible to detect small objects,
    you do not need to train the network again, just use .weights-file already trained for 416x416 resolution.
    即使在用416*416训练完之后，也可以在cfg文件中设置较大的width和height，增加网络对图像的分辨率，从而更可能检测出图像中的小目标，而不需要重新训练

    if error Out of memory occurs then in .cfg-file you should increase subdivisions=16, 32 or 64
    Out of memory的错误需要通过增大subdivisions来解决
[net]                        ★ [xxx]开始的行表示网络的一层，其后的内容为该层的参数配置，[net]为特殊的层，配置整个网络
# Testing                    ★ #号开头的行为注释行，在解析cfg的文件时会忽略该行
# batch=1
# subdivisions=1
# Training
batch=64                     ★ 这儿batch与机器学习中的batch有少许差别，仅表示网络积累多少个样本后进行一次BP 
subdivisions=16              ★ 这个参数表示将一个batch的图片分sub次完成网络的前向传播
                             ★★ 敲黑板：在Darknet中，batch和sub是结合使用的，例如这儿的batch=64，sub=16表示训练的过
                             程中将一次性加载64张图片进内存，然后分16次完成前向传播，意思是每次4张，前向传播的循环过程中
                             累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数
                             ★★★ 调参经验：sub一般设置16，不能太大或太小，且为8的倍数，其实也没啥硬性规定，看着舒服就好
                             batch的值可以根据显存占用情况动态调整，一次性加减sub大小即可，通常情况下batch越大越好，还需
                             注意一点，在测试的时候batch和sub都设置为1，避免发生神秘错误！

width=608                    ★ 网络输入的宽width
height=608                   ★ 网络输入的高height
channels=3                   ★ 网络输入的通道数channels
                             ★★★ width和height一定要为32的倍数，否则不能加载网络
                             ★ 提示：width也可以设置为不等于height，通常情况下，width和height的值越大，对于小目标的识别
                             效果越好，但受到了显存的限制，读者可以自行尝试不同组合
                             
momentum=0.9                 ★ 动量 DeepLearning1中最优化方法中的动量参数，这个值影响着梯度下降到最优值得速度
decay=0.0005                 ★ 权重衰减正则项，防止过拟合

angle=0                      ★ 数据增强参数，通过旋转角度来生成更多训练样本
saturation = 1.5             ★ 数据增强参数，通过调整饱和度来生成更多训练样本
exposure = 1.5               ★ 数据增强参数，通过调整曝光量来生成更多训练样本
hue=.1                       ★ 数据增强参数，通过调整色调来生成更多训练样本

learning_rate=0.001          ★ 学习率决定着权值更新的速度，设置得太大会使结果超过最优值，太小会使下降速度过慢。
                             如果仅靠人为干预调整参数，需要不断修改学习率。刚开始训练时可以将学习率设置的高一点，
                             而一定轮数之后，将其减小在训练过程中，一般根据训练轮数设置动态变化的学习率。
                             刚开始训练时：学习率以 0.01 ~ 0.001 为宜。一定轮数过后：逐渐减缓。
                             接近训练结束：学习速率的衰减应该在100倍以上。
                             学习率的调整参考https://blog.csdn.net/qq_33485434/article/details/80452941
                             ★★★ 学习率调整一定不要太死，实际训练过程中根据loss的变化和其他指标动态调整，手动ctrl+c结
                             束此次训练后，修改学习率，再加载刚才保存的模型继续训练即可完成手动调参，调整的依据是根据训练
                             日志来，如果loss波动太大，说明学习率过大，适当减小，变为1/5，1/10均可，如果loss几乎不变，
                             可能网络已经收敛或者陷入了局部极小，此时可以适当增大学习率，注意每次调整学习率后一定要训练久
                             一点，充分观察，调参是个细活，慢慢琢磨
                             ★★ 一点小说明：实际学习率与GPU的个数有关，例如你的学习率设置为0.001，如果你有4块GPU，那
                             真实学习率为0.001/4
burn_in=1000                 ★ 在迭代次数小于burn_in时，其学习率的更新有一种方式，大于burn_in时，才采用policy的更新方式
max_batches = 500200         ★ 训练次数达到max_batches后停止学习，一次为跑完一个batch

policy=steps                 ★ 学习率调整的策略：constant, steps, exp, poly, step, sig, RANDOM，constant等方式
                             参考https://nanfei.ink/2018/01/23/YOLOv2%E8%B0%83%E5%8F%82%E6%80%BB%E7%BB%93/#more
steps=400000,450000          
scales=.1,.1                 ★ steps和scale是设置学习率的变化，比如迭代到400000次时，学习率衰减十倍，45000次迭代时，学
                             习率又会在前一个学习率的基础上衰减十倍

[convolutional]              ★ 一层卷积层的配置说明
batch_normalize=1            ★ 是否进行BN处理，什么是BN此处不赘述，1为是，0为不是 
filters=32                   ★ 卷积核个数，也是输出通道数
size=3                       ★ 卷积核尺寸
stride=1                     ★ 卷积步长
pad=1                        ★ 卷积时是否进行0 padding,padding的个数与卷积核尺寸有关，为size/2向下取整，如3/2=1
activation=leaky             ★ 网络层激活函数
                             ★★ 卷积核尺寸3*3配合padding且步长为1时，不改变feature map的大小
                             
# Downsample
[convolutional]              ★ 下采样层的配置说明
batch_normalize=1
filters=64
size=3
stride=2
pad=1
activation=leaky             ★★ 卷积核尺寸为3*3，配合padding且步长为2时，feature map变为原来的一半大小

[shortcut]                   ★ shotcut层配置说明
from=-3                      ★ 与前面的多少次进行融合，-3表示前面第三层
activation=linear            ★ 层次激活函数
    ......
    ......
[convolutional]              ★ YOLO层前面一层卷积层配置说明
size=1
stride=1
pad=1
filters=255                  ★ filters=num(预测框个数)*(classes+5)，5的意义是4个坐标加一个置信率，论文中的tx,ty,tw,th,
                             c，classes为类别数，COCO为80,num表示YOLO中每个cell预测的框的个数，YOLOV3中为3
                             ★★★ 自己使用时，此处的值一定要根据自己的数据集进行更改，例如你识别4个类，则：
                             filters=3*(4+5)=27,三个fileters都需要修改，切记
activation=linear

[yolo]                       ★ YOLO层配置说明
mask = 0,1,2                 ★  使用anchor的索引，0，1，2表示使用下面定义的anchors中的前三个anchor
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326   
classes=80                   ★ 类别数目
num=9                        ★ 每个grid cell总共预测几个box,和anchors的数量一致。当想要使用更多anchors时需要调大num
jitter=.3                    ★ 数据增强手段，此处jitter为随机调整宽高比的范围，该参数不好理解，在我的源代码注释中有详细说明
ignore_thresh = .7
truth_thresh = 1             ★ 参与计算的IOU阈值大小.当预测的检测框与ground true的IOU大于ignore_thresh的时候，参与
                             loss的计算，否则，检测框的不参与损失计算。
                             ★ 理解：目的是控制参与loss计算的检测框的规模，当ignore_thresh过于大，接近于1的时候，那么参与
                             检测框回归loss的个数就会比较少，同时也容易造成过拟合；而如果ignore_thresh设置的过于小，那么
                             参与计算的会数量规模就会很大。同时也容易在进行检测框回归的时候造成欠拟合。
                             ★ 参数设置：一般选取0.5-0.7之间的一个值，之前的计算基础都是小尺度（13*13）用的是0.7，
                             （26*26）用的是0.5。这次先将0.5更改为0.7。参考：https://www.e-learn.cn/content/qita/804953
random=1                     ★ 为1打开随机多尺度训练，为0则关闭
                             ★★ 提示：当打开随机多尺度训练时，前面设置的网络输入尺寸width和height其实就不起作用了，width
                             会在320到608之间随机取值，且width=height，没10轮随机改变一次，一般建议可以根据自己需要修改
                             随机尺度训练的范围，这样可以增大batch，望读者自行尝试！
