#include "objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/opencv.hpp"
#include "ImageFeatrueExtract.h"

#include <atltime.h>
#include <windows.h>
#include <stdlib.h>
#include <io.h>
#include <direct.h>

#include <fstream>
using namespace cv;
using namespace ml;
using namespace std;

#define ADABOOST_MODEL_FILE						"./modelFile/xuModelFile_1KX2K_17.xml"
#define ANN_MODEL_FILE                              "./modelFile/xuModel_TPLBP_Hog_3layer0807_99.xml"

int main(int argc, char** argv)
{
	const string PalmFileName = "./AdaXu";
	const string AnnRoiFilePalm = "./AnnRoiXu";

	char imageName[200];
	char AnnImageName[200];
	char AnnRoiImageName[200];
	char timeName[30];
	int index = 0;
	int64 i64FrmSeqNum = 0;

	if (_access(PalmFileName.c_str(), 0) == -1)
		_mkdir(PalmFileName.c_str());
	if (_access(AnnRoiFilePalm.c_str(), 0) == -1)
		_mkdir(AnnRoiFilePalm.c_str());
	SYSTEMTIME st;
	CString strDate, strTime;

	Ptr<ANN_MLP> ann = Algorithm::load<ANN_MLP>(ANN_MODEL_FILE); // load ANN model File 
	if (ann->empty())
	{
		std::cout << "Load ANN model File Error" << std::endl;
		getchar();
		return -1;
	}
	CascadeClassifier object_cascade;
	object_cascade.load(ADABOOST_MODEL_FILE);  // load  Adaboost file
	if (object_cascade.empty())
	{
		std::cout << " Load File Failed" << std::endl;
		getchar();
		return -1;
	}
#ifdef INPUT_TXT_FILE
	ifstream inStr(INPUT_TXT_FILE);
	if (!inStr.is_open())
	{
		getchar();
		return -1;
	}
#else
	VideoCapture cap(0);
	if (!cap.isOpened())
	{
		cout << "Couldn't Open Cam!" << endl;
		getchar();
		return -1;
	}
#endif 


#ifdef INPUT_TXT_FILE
	std::string strFileName;
	std::cout << "Processing :" << INPUT_TXT_FILE << std::endl;
#endif // INPUT_TXT_FILE

	cv::Mat frame_cpp;

#ifdef INPUT_TXT_FILE
	while (std::getline(inStr, strFileName))
	{
		if (!strFileName.empty())
		{
			frame_cpp = imread(strFileName);
		}
		//capture >> frame_cpp;
		if (frame_cpp.empty())
		{
			std::cout << "Read frame Error,File Name:" << strFileName << std::endl;
			continue;
		}

		Mat afterANN;
		frame_cpp.copyTo(afterANN);
		i64FrmSeqNum++;
		Mat GrayFrame;
		if (frame_cpp.channels() == 3)
			cvtColor(frame_cpp, GrayFrame, COLOR_BGR2GRAY);
		else
			GrayFrame = frame_cpp;

		vector<Rect> vecObjects;
		object_cascade.detectMultiScale(GrayFrame, vecObjects, 1.1, 1, 0, Size(40, 66), Size(120, 200));
		if (index > 999)
			index = 0;

		Mat temp;
		frame_cpp.copyTo(temp);
		for (unsigned int i = 0; i < vecObjects.size(); i++)
		{
			// get system time
			GetLocalTime(&st);
			int year = st.wYear;
			int month = st.wMonth;
			int day = st.wDay;
			int hour = st.wHour;
			int minute = st.wMinute;
			int second = st.wSecond;
			sprintf_s(timeName, "%04d%02d%02d%02d%02d%02d%s", year, month, day, hour, minute, second, "_");
			sprintf_s(imageName, "%s/%s%d%s", PalmFileName.c_str(), timeName, ++index, ".jpg");
			//sprintf_s(AnnImageName, "%s/%s%d%s", AnnPalmName, timeName, index, ".jpg");
			//sprintf_s(AdaImageName, "%s/%s%d%s", AdaPalmName, timeName, index, ".jpg");
			sprintf_s(AnnRoiImageName, "%s/%s%d%s", AnnRoiFilePalm.c_str(), timeName, index, ".jpg");

			Rect rect = vecObjects[i];
			Point point1, point2;
			point1.x = rect.x;
			point1.y = rect.y;
			point2.x = rect.x + rect.width;
			point2.y = rect.y + rect.height;

			int x, y, width, height;

			x = (int)(rect.x - (rect.width) * 0);
			y = (int)(rect.y - (rect.height) * 0);
			width = (int)(rect.width) * 1;
			height = (int)(rect.height) * 1;

			if (x < 0)
				x = 0;
			if (y < 0)
				y = 0;
			if ((x + width) > temp.cols)
				width = (int)(temp.cols) - x;
			if ((y + height) > temp.rows)
				height = (int)(temp.rows) - y;

			cv::Mat imageROI = temp(Rect(x, y, width, height));
			cv::imwrite(imageName, imageROI);

			cv::Mat extractRoi;
			if (imageROI.channels() == 3)
				cv::cvtColor(imageROI, extractRoi, COLOR_BGR2GRAY);
			else
				extractRoi = imageROI;

			cv::Mat feature = ImageFeatureLib::Get_LBP_Uniform_Grid(extractRoi, 4, 4);
			cv::Mat result;
			ann->predict(feature, result);
			float* pfRow = result.ptr<float>(0);
			if (pfRow[0] > pfRow[1])
			{
				cv::rectangle(afterANN, point1, point2, Scalar(0, 255, 0), 2);
				//imwrite(AnnImageName,afterANN);
				cv::imwrite(AnnRoiImageName, imageROI);
			}
			cv::rectangle(frame_cpp, point1, point2, Scalar(0, 0, 255), 2);
		}
		char sText[128] = "\0";
		std::sprintf(sText, "%d", i64FrmSeqNum);
		cv::putText(frame_cpp, sText, Point(30, 30), FONT_HERSHEY_PLAIN, 2.0, Scalar(255, 0, 0), 2);
		std::cout << "Frame : " << i64FrmSeqNum << std::endl;
		cv::imshow("Adaboost", frame_cpp);
		cv::imshow("Ada_Ann", afterANN);

		int iKey = cv::waitKey(10);
		if (iKey == 27)
			break;
	}
#else
	while (1) {
		cap >> frame_cpp;
		if (frame_cpp.empty())
		{
			std::cout << "Read frame Error!" << std::endl;
			destroyAllWindows();
			return -1;
		}

		Mat afterANN;
		frame_cpp.copyTo(afterANN);
		i64FrmSeqNum++;
		Mat GrayFrame;
		if (frame_cpp.channels() == 3)
			cvtColor(frame_cpp, GrayFrame, COLOR_BGR2GRAY);
		else
			GrayFrame = frame_cpp;

		vector<Rect> vecObjects;
		object_cascade.detectMultiScale(GrayFrame, vecObjects, 1.1, 1, 0, Size(18, 30), Size(144, 240));
		if (index > 999)
			index = 0;
		Mat temp;
		frame_cpp.copyTo(temp);
		for (unsigned int i = 0; i < vecObjects.size(); i++)
		{
			// get system time
			GetLocalTime(&st);
			int year = st.wYear;
			int month = st.wMonth;
			int day = st.wDay;
			int hour = st.wHour;
			int minute = st.wMinute;
			int second = st.wSecond;
			sprintf_s(timeName, "%04d%02d%02d%02d%02d%02d%s", year, month, day, hour, minute, second, "_");
			sprintf_s(imageName, "%s/%s%d%s", PalmFileName.c_str(), timeName, ++index, ".jpg");
			sprintf_s(AnnRoiImageName, "%s/%s%d%s", AnnRoiFilePalm.c_str(), timeName, index, ".jpg");

			Rect rect = vecObjects[i];
			Point point1, point2;
			point1.x = rect.x;
			point1.y = rect.y;
			point2.x = rect.x + rect.width;
			point2.y = rect.y + rect.height;

			int x, y, width, height;

			x = (int)(rect.x - (rect.width) * 0.0);
			y = (int)(rect.y - (rect.height) * 0.0);
			width = (int)(rect.width) * 1.0;
			height = (int)(rect.height) * 1.0;

			if (x < 0)
				x = 0;
			if (y < 0)
				y = 0;
			if ((x + width) > temp.cols)
				width = (int)(temp.cols) - x;
			if ((y + height) > temp.rows)
				height = (int)(temp.rows) - y;

			cv::Mat imageROI = temp(Rect(x, y, width, height));
			//cv::imwrite(imageName, imageROI);

			cv::Mat extractRoi;
			if (imageROI.channels() == 3)
				cv::cvtColor(imageROI, extractRoi, COLOR_BGR2GRAY);
			else
				extractRoi = imageROI;

			cv::resize(extractRoi, extractRoi, Size(36, 60), INTER_CUBIC);
			cv::Mat feature = ImageFeatureLib::Get_TPLBP_Hog_Grid(extractRoi, 9, 4, 4, 4, 4);
			cv::Mat result;
			ann->predict(feature, result);
			float* pfRow = result.ptr<float>(0);
			if (pfRow[0] > 0.7)
			{
				cv::rectangle(afterANN, Rect(x, y, width, height), Scalar(0, 255, 0), 2);
				//imwrite(AnnImageName,afterANN);
				cv::imwrite(AnnRoiImageName, imageROI);  //保存为正样本
			}
			else
				cv::imwrite(imageName, imageROI);  //如果识别为正样本则在正样本中进行保存，否则在负样本中进行保存

			cv::rectangle(frame_cpp, point1, point2, Scalar(0, 0, 255), 2);
		}
		char sText[128] = "\0";
		std::sprintf(sText, "%d", i64FrmSeqNum);
		cv::putText(frame_cpp, sText, Point(30, 30), FONT_HERSHEY_PLAIN, 2.0, Scalar(255, 0, 0), 2);
		std::cout << "Frame : " << i64FrmSeqNum << std::endl;
		cv::imshow("Adaboost", frame_cpp);
		cv::imshow("Ann", afterANN);

		int iKey = cv::waitKey(10);
		if (iKey == 27)
			break;
	}
#endif // INPUT_TXT_FILE
	destroyAllWindows();
	return 0;
}