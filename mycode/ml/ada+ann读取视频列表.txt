#include "objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/opencv.hpp"
#include "ImageFeatrueExtract.h"
#include <dlib\image_processing\frontal_face_detector.h>
#include <dlib\gui_widgets.h>
#include <dlib\image_io.h>
#include<dlib\opencv.h>
#include<iostream>

#include <atltime.h>
#include <windows.h>
#include <stdlib.h>
#include <io.h>
#include <direct.h>
#include <fstream>
#include <stdio.h>

using namespace cv;
using namespace ml;
using namespace std;

#define INPUT_TXT_FILE                          "D:\\video\\video.txt"
#define ADABOOST_MODEL_FILE						"./modelFile/faceModelFile0910_6kX9k_14.xml"
#define ANN_MODEL_FILE                              "./modelFile/faceModel_lbp_Hog_3layer0831_40X40.xml"

int main(int argc, char** argv)
{
	char imageName[200];
	char AnnRoiImageName[200];
	char timeName[30];
	string strFileName;
	int index = 0;
	int64 i64FrmSeqNum = 0;
	SYSTEMTIME st;
	CString strDate, strTime;
	int count = 1;
	Ptr<ANN_MLP> ann = Algorithm::load<ANN_MLP>(ANN_MODEL_FILE); // load ANN model File 
	if (ann->empty())
	{
		std::cout << "Load ANN model File Error" << std::endl;
		getchar();
		return -1;
	}

	CascadeClassifier object_cascade;
	object_cascade.load(ADABOOST_MODEL_FILE);  // load  Adaboost file
	if (object_cascade.empty())
	{
		std::cout << " Load File Failed" << std::endl;
		getchar();
		return -1;
	}
	const string AdaFileName = "./Annneg";
	const string AnnRoiFilePalm = "./AnnPos";
	if (_access(AdaFileName.c_str(), 0) == -1)
		_mkdir(AdaFileName.c_str());
	if (_access(AnnRoiFilePalm.c_str(), 0) == -1)
		_mkdir(AnnRoiFilePalm.c_str());

	ifstream inStr(INPUT_TXT_FILE);
	if (!inStr.is_open())
	{
		cout << "read videofile error" << endl;
		getchar();
		return -1;
	}
	while (std::getline(inStr, strFileName))
	{
		if (!strFileName.empty())
		{
			VideoCapture cap(strFileName);
			i64FrmSeqNum = 0;
			cout << "处理视频个数" << count++ << endl;
			cout << "正在处理文件：" << strFileName << endl;
			cv::Mat frame_cpp;
			while (1)
			{
				cap >> frame_cpp;
				if (frame_cpp.empty())
				{
					std::cout << "complete one" << std::endl;
					destroyAllWindows();
					break;
				}
				Mat afterANN;
				frame_cpp.copyTo(afterANN);
				i64FrmSeqNum++;
				Mat GrayFrame;
				if (frame_cpp.channels() == 3)
					cvtColor(frame_cpp, GrayFrame, COLOR_BGR2GRAY);
				else
					GrayFrame = frame_cpp;

				vector<Rect> vecObjects;
				object_cascade.detectMultiScale(GrayFrame, vecObjects, 1.1, 1, 0, Size(20, 20), Size(300, 300));
				if (index > 999)
					index = 0;
				Mat temp;
				frame_cpp.copyTo(temp);
				for (unsigned int i = 0; i < vecObjects.size(); i++)
				{
					GetLocalTime(&st);
					int year = st.wYear;
					int month = st.wMonth;
					int day = st.wDay;
					int hour = st.wHour;
					int minute = st.wMinute;
					int second = st.wSecond;
					sprintf_s(timeName, "%04d%02d%02d%02d%02d%02d%s", year, month, day, hour, minute, second, "_");
					sprintf_s(imageName, "%s/%s%d%s", AdaFileName.c_str(), timeName, ++index, ".jpg");
					sprintf_s(AnnRoiImageName, "%s/%s%d%s", AnnRoiFilePalm.c_str(), timeName, index, ".jpg");

					Rect rect = vecObjects[i];
					Point point1, point2;
					point1.x = rect.x;
					point1.y = rect.y;
					point2.x = rect.x + rect.width;
					point2.y = rect.y + rect.height;

					int x, y, width, height;

					x = (int)(rect.x - (rect.width) * 0.0);
					y = (int)(rect.y - (rect.height) * 0.0);
					width = (int)(rect.width) * 1.0;
					height = (int)(rect.height) * 1.0;

					if (x < 0)
						x = 0;
					if (y < 0)
						y = 0;
					if ((x + width) > temp.cols)
						width = (int)(temp.cols) - x;
					if ((y + height) > temp.rows)
						height = (int)(temp.rows) - y;

					cv::Mat imageROI = temp(Rect(x, y, width, height));
					cv::rectangle(frame_cpp, Rect(x, y, width, height), Scalar(255, 0, 0), 2);

					cv::Mat extractRoi;
					if (imageROI.channels() == 3)
						cv::cvtColor(imageROI, extractRoi, COLOR_BGR2GRAY);
					else
						extractRoi = imageROI;

					cv::resize(extractRoi, extractRoi, Size(40, 40), INTER_CUBIC);
					cv::Mat feature = ImageFeatureLib::Get_TPLBP_Hog_Grid(extractRoi, 9, 4, 4, 4, 4);
					cv::Mat result;
					ann->predict(feature, result);
					float* pfRow = result.ptr<float>(0);
					if (pfRow[0] > 0.95)
					{
						cv::rectangle(frame_cpp, Rect(x, y, width, height), Scalar(0, 255, 0), 2);
						//imwrite(AnnRoiFilePalm, imageROI);
					}
					else
					{
						imwrite(imageName, imageROI);
					}
				}
				char sText[128] = "\0";
				std::sprintf(sText, "%d", i64FrmSeqNum);
				cv::putText(frame_cpp, sText, Point(30, 30), FONT_HERSHEY_PLAIN, 2.0, Scalar(255, 0, 0), 2);
				//std::cout << "Frame : " << i64FrmSeqNum << std::endl;
				cv::imshow("Adaboost", frame_cpp);
				int iKey = cv::waitKey(1);
				if (iKey == 27)
					return -1;
			}
		}
	}
	destroyAllWindows();
	return 0;
}