#include "objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/opencv.hpp"
#include "ImageFeatrueExtract.h"
#include <dlib\image_processing\frontal_face_detector.h>
#include <dlib\gui_widgets.h>
#include <dlib\image_io.h>
#include<dlib\opencv.h>
#include<iostream>

#include <atltime.h>
#include <windows.h>
#include <stdlib.h>
#include <io.h>
#include <direct.h>
#include <fstream>

#define ANN_MODEL_FILE                              "./modelFile/BP_TPLBP_HOG_3layer.xml"

using namespace dlib;
using namespace cv;
using namespace ml;
using namespace std;


int main(int argc, char** argv)
{
	Mat frame, faceROI, tmpImg, GrayfaceROI, xuROI;
	int x = 0, y = 0, w = 0, h = 0; // the dlib face location
	int ROI_x = 0, ROI_y = 0, ROI_w = 0, ROI_h = 0, ROI_h_p = 0;
	float radio_ROI = 0.2;
	float radio_h = 1.0;
	frontal_face_detector detector = get_frontal_face_detector();
	Ptr<ANN_MLP> ann = Algorithm::load<ANN_MLP>(ANN_MODEL_FILE); // load ANN model File
	if (ann->empty())
	{
		std::cout << "Load ANN model File Error" << std::endl;
		getchar();
		return -1;
	}
	VideoCapture cap("D:\\video\\2\\Video 25.wmv");
	if (!cap.isOpened())
	{
		cout << "open video error" << endl;
	}
	while (1)
	{
		cap >> frame;
		frame.copyTo(tmpImg);
		dlib::cv_image<bgr_pixel> img(frame);
		std::vector<dlib::rectangle> dets = detector(img);
		for (int i = 0; i < dets.size(); i++)
		{
			x = dets[i].left();
			y = dets[i].top();
			w = dets[i].right() - dets[i].left();
			h = dets[i].bottom() - dets[i].top();
			if (x < 0)
				x = 0;
			if (y < 0)
				y = 0;
			if (x + w > img.nc())
				w = img.nc() - x - 1;
			if (y + h > img.nr())
				h = img.nr() - y - 1;

			faceROI = tmpImg(Rect(x, y, w, h));

			cv::rectangle(frame, Rect(x, y, w, h), Scalar(255, 0, 0), 2); // rectangle the detect ROI

			if (faceROI.channels() == 3)
				cvtColor(faceROI, GrayfaceROI, COLOR_BGR2GRAY);
			else
				GrayfaceROI = faceROI;
			std::vector<cv::Rect> vecObjects;

			cv::resize(GrayfaceROI, GrayfaceROI, Size(36, 36), INTER_CUBIC);
			cv::Mat feature = ImageFeatureLib::Get_TPLBP_Hog_Grid(GrayfaceROI, 9, 4, 4, 4, 4);
			cv::Mat result;
			ann->predict(feature, result);
			float* pfRow = result.ptr<float>(0);
			if (pfRow[0] > 0.5)
			{
				cv::rectangle(tmpImg, Rect(x, y, w, h), Scalar(0, 255, 0), 2);
				cout << "identify face" << endl;
			}
		}
		imshow("face", frame);
		imshow("mineface", tmpImg);
		int c = cv::waitKey(1);
		if (c == 27)
			return -1;
	}
	return 0;
}